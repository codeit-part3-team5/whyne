{
  "extends": [
    "next/core-web-vitals", // Core Web Vitals 관련 Next.js 규칙
    "prettier", // Prettier와 충돌하는 ESLint 규칙 비활성화
    "plugin:@typescript-eslint/recommended" // TypeScript 추천 규칙
  ],
  "parser": "@typescript-eslint/parser", // TypeScript 코드를 파싱하기 위한 파서 지정
  "plugins": [
    "@typescript-eslint" // TypeScript 규칙 플러그인
  ],
  "parserOptions": {
    "ecmaVersion": "latest", // 최신 ECMAScript 버전 사용
    "sourceType": "module", // ES Modules 사용
    "project": "./tsconfig.json", // TypeScript 프로젝트의 tsconfig.json 경로 지정 (타입 기반 규칙에 필요)
    "ecmaFeatures": {
      "jsx": true // JSX 문법 허용
    }
  },
  "env": {
    "browser": true, // 브라우저 전역 변수 허용
    "node": true // Node.js 전역 변수 허용 (Next.js 환경에 적합)
  },
  "rules": {
    "react/react-in-jsx-scope": "off", // Next.js는 React 17+부터 React import가 필요 없습니다.
    "no-unused-vars": "off", // 사용하지 않는 변수 경고
    "@typescript-eslint/no-unused-vars": [
      "warn",
      { "argsIgnorePattern": "^_", "varsIgnorePattern": "^_" } // "_"로 시작하는 인자/변수 무시
    ],

    // --- 명명 규칙 (@typescript-eslint/naming-convention) ---
    // 이 규칙은 파일명 규칙과 별개로 코드 내의 변수, 함수, 타입 등의 명명 규칙을 강제합니다.
    "@typescript-eslint/naming-convention": [
      "error",
      // 기본적으로 모든 식별자는 camelCase (Next.js, React 기본)
      {
        "selector": "default",
        "format": ["camelCase"],
        "leadingUnderscore": "allow" // private 변수 등을 위해 _variable 허용
      },
      // 변수: camelCase, PascalCase (React 컴포넌트), UPPER_CASE (환경변수/상수)
      {
        "selector": "variable",
        "format": ["camelCase", "PascalCase", "UPPER_CASE"],
        "leadingUnderscore": "allow"
      },
      // 함수: camelCase (일반 함수), PascalCase (React 컴포넌트)
      {
        "selector": "function",
        "format": ["camelCase", "PascalCase"]
      },
      // 타입 관련 (인터페이스, 타입 별칭, 클래스, enum 등) PascalCase
      {
        "selector": "typeLike",
        "format": ["PascalCase"]
      },
      // Enum 멤버: PascalCase (권장) 또는 UPPER_CASE
      {
        "selector": "enumMember",
        "format": ["PascalCase", "UPPER_CASE"]
      },
      // React 컴포넌트의 props는 camelCase
      {
        "selector": ["property", "parameterProperty"],
        "format": ["camelCase", "PascalCase"] // Prop으로 사용될 수 있는 경우 PascalCase 허용
      }
    ]
  }
}
